{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setSortType","isReversed","setIsReverced","handleSortType","order","goods","visibleGoods","sort","a","b","ALPHABET","localeCompare","LENGTH","length","console","log","reverse","getReorderedGoods","shouldRenderResetButton","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAwCE,IAAME,EAAgB,WAC3B,MAAgCC,mBAASH,EAASI,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAAiB,SAACC,GACtBJ,EAAYI,IAYRC,EA7CD,SACLA,EADK,GAGJ,IADCN,EACF,EADEA,SAAUE,EACZ,EADYA,WAGNK,EAAY,YAAOD,GAgBzB,OAdAC,EAAaC,MAAK,SAACC,EAAGC,GACpB,OAAQV,GACN,KAAKL,EAASgB,SACZ,OAAOF,EAAEG,cAAcF,GACzB,KAAKf,EAASkB,OACZ,OAAOJ,EAAEK,OAASJ,EAAEI,OACtB,QACE,OAAO,MAKbC,QAAQC,IAAIhB,EAAUE,GAElBA,EACKK,EAAaU,UAGfV,EAoBOW,CAAkBtB,EAAiB,CAAEI,WAAUE,eACvDiB,EAA0BnB,IAAaL,EAASI,MAAQG,EAE9D,OACE,sBAAKkB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,WAAYtB,IAAaL,EAASgB,WAEtCY,QAAS,kBAAMnB,EAAeT,EAASgB,WAPzC,iCAYA,wBACEU,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAAYtB,IAAaL,EAASkB,SAEtCU,QAAS,kBAAMnB,EAAeT,EAASkB,SAPzC,4BAYA,wBACEQ,KAAK,SACLD,UAAWE,IACT,SACA,cACA,CAAE,YAAapB,IAEjBqB,QA9CkB,WACxBpB,GAAeD,IAsCX,qBAaEiB,GACE,wBACEE,KAAK,SACLD,UAAU,4BACVG,QApDQ,WAClBtB,EAAYN,EAASI,MACrBI,GAAc,IA+CN,sBAWN,6BACE,6BACGG,EAAMkB,KAAI,SAAAC,GAAI,OACb,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,cClIrBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.5666edeb.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\n// Use this function in the render method to prepare goods\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((a, b) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return a.localeCompare(b);\n      case SortType.LENGTH:\n        return a.length - b.length;\n      default:\n        return 0;\n    }\n  });\n\n  // eslint-disable-next-line no-console\n  console.log(sortType, isReversed);\n\n  if (isReversed) {\n    return visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setIsReverced] = useState(false);\n\n  const handleSortType = (order: SortType) => {\n    setSortType(order);\n  };\n\n  const handleOrderChange = () => {\n    setIsReverced(!isReversed);\n  };\n\n  const handleReset = () => {\n    setSortType(SortType.NONE);\n    setIsReverced(false);\n  };\n\n  const goods = getReorderedGoods(goodsFromServer, { sortType, isReversed });\n  const shouldRenderResetButton = sortType !== SortType.NONE || isReversed;\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-info',\n            { 'is-light': sortType !== SortType.ALPHABET },\n          )}\n          onClick={() => handleSortType(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={() => handleSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-warning ',\n            { 'is-light': !isReversed },\n          )}\n          onClick={handleOrderChange}\n        >\n          Reverse\n        </button>\n\n        {\n          shouldRenderResetButton && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={handleReset}\n            >\n              Reset\n            </button>\n          )\n        }\n      </div>\n\n      <ul>\n        <ul>\n          {goods.map(good => (\n            <li key={good} data-cy=\"Good\">{good}</li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}